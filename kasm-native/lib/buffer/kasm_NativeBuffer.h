/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class kasm_NativeBuffer */

#ifndef _Included_kasm_NativeBuffer
#define _Included_kasm_NativeBuffer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     kasm_NativeBuffer
 * Method:    allocate
 * Signature: (JZ)Ljava/nio/ByteNativeBuffer;
 */
JNIEXPORT jobject JNICALL Java_kasm_NativeBuffer_allocate
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     kasm_NativeBuffer
 * Method:    toArray
 * Signature: (Ljava/nio/ByteNativeBuffer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_kasm_NativeBuffer_toArray
  (JNIEnv *, jclass, jobject);

/*
 * Class:     kasm_NativeBuffer
 * Method:    protect
 * Signature: (Ljava/nio/ByteNativeBuffer;Z)V
 */
JNIEXPORT void JNICALL Java_kasm_NativeBuffer_protect
  (JNIEnv *, jclass, jobject, jboolean);

/*
 * Class:     kasm_NativeBuffer
 * Method:    execute
 * Signature: (Ljava/nio/ByteNativeBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_kasm_NativeBuffer_execute
  (JNIEnv *, jclass, jobject);

/*
 * Class:     kasm_NativeBuffer
 * Method:    executeUnsafe
 * Signature: (Ljava/nio/ByteNativeBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_kasm_NativeBuffer_executeUnsafe
  (JNIEnv *, jclass, jobject);

/*
 * Class:     kasm_NativeBuffer
 * Method:    release
 * Signature: (Ljava/nio/ByteNativeBuffer;Z)V
 */
JNIEXPORT void JNICALL Java_kasm_NativeBuffer_release
  (JNIEnv *, jclass, jobject, jboolean);

/*
 * Class:     kasm_NativeBuffer
 * Method:    address
 * Signature: (Ljava/nio/ByteNativeBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_kasm_NativeBuffer_address
  (JNIEnv *, jclass, jobject);

#ifdef __cplusplus
}
#endif
#endif
